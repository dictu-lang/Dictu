/**
 * This file contains all the methods for Lists written in Dictu that
 * are unable to be written in C due to re-enterability issues.
 *
 * We should always strive to write methods in C where possible.
 */
def map(list, func) {
    const temp = [];

    for (var i = 0; i < list.len(); i += 1) {
        temp.push(func(list[i]));
    }

    return temp;
}

def sortFunc(list, func) {
    if(list.len() < 2) {
        return;
    }
    const partition = def (arr, start, end) => {
        const pivot = arr[end];
        var i = start - 1;
        for(var t = start; t <= end-1; t+= 1) {
            if(func(pivot, arr[t]) > 0) {
                i+= 1;
                const temp = arr[i];
                arr[i] = arr[t];
                arr[t] = temp;
            }
        }
        const temp = arr[i+1];
        arr[i+1] = arr[end];
        arr[end] = temp;
        return i + 1;
    };
    const quickSort = def(arr, start, end) => {
        if(start < end) {
            const p = partition(arr, start, end);
            quickSort(arr, start, p - 1);
            quickSort(arr, p + 1, end);
        }
    };
    quickSort(list, 0, list.len()-1);
}

def filter(list, func=def(x) => x) {
    const temp = [];

    for (var i = 0; i < list.len(); i += 1) {
        const result = func(list[i]);
        if (result) {
            temp.push(list[i]);
        }
    }

    return temp;
}

def reduce(list, func, initial=0) {
    var accumulator = initial;

    for (var i = 0; i < list.len(); i += 1) {
        accumulator = func(accumulator, list[i]);
    }

    return accumulator;
}

def forEach(list, func) {
    for (var i = 0; i < list.len(); i += 1) {
        func(list[i]);
    }
}

def find(list, func, start=0, end=list.len()) {
    for (var i = start; i < end; i += 1) {
        if (func(list[i])) {
            return list[i];
        }
    }
}

def findIndex(list, func, start=0, end=list.len()) {
    for (var i = start; i < end; i += 1) {
        if (func(list[i])) {
            return i;
        }
    }
}

def splice(list, index, count, items) {
    if (count == 0) {
        return list[:index]+items+list[index:];    
    }

    return list[:index]+items+list[index+count:];
}

def unique(list) {
    var dict = {};
    list.forEach(def(e) => {
        dict[e] = nil;
    });

    return dict.keys();
}
