/**
 * classAnnotations.du
 *
 * Testing class classAnnotations
 */
from UnitTest import UnitTest;

class NoAnnotations {}

@EmptyAnnotation
@TrueAnnotation(true)
@FalseAnnotation(false)
@NumberAnnotation(10)
@DecimalNumberAnnotation(10.5)
@NilAnnotation(nil)
class Test {
    
    @EmptyAnnotation
    @TrueAnnotation(true)
    @FalseAnnotation(false)
    @NumberAnnotation(10)
    @DecimalNumberAnnotation(10.5)
    @NilAnnotation(nil)
    methodOnAClass() {}
}


class TestClassAnnotations < UnitTest {
    testClassAnnotationsEmpty() {
        this.assertEquals(NoAnnotations.classAnnotations, nil);
    }

    testClassAnnotations() {
        this.assertEquals(Test.classAnnotations.len(), 6);
        this.assertEquals(Test.classAnnotations['EmptyAnnotation'], nil);
        this.assertEquals(Test.classAnnotations['TrueAnnotation'], true);
        this.assertEquals(Test.classAnnotations['FalseAnnotation'], false);
        this.assertEquals(Test.classAnnotations['NumberAnnotation'], 10);
        this.assertEquals(Test.classAnnotations['DecimalNumberAnnotation'], 10.5);
        this.assertEquals(Test.classAnnotations['NilAnnotation'], nil);
    }

    testMethodAnnotations() {
        this.assertEquals(Test.methodAnnotations.len(), 1);
        this.assertEquals(Test.methodAnnotations['methodOnAClass'].len(), 6);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['EmptyAnnotation'], nil);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['TrueAnnotation'], true);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['FalseAnnotation'], false);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['NumberAnnotation'], 10);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['DecimalNumberAnnotation'], 10.5);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['NilAnnotation'], nil);
    }
}

TestClassAnnotations().run();